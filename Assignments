Create table FootBallLeague
(
MatchID int primary key,
TeamName1 nvarchar(30),
TeamName2 nvarchar(30),
Status varchar(10),
WinningTeam nvarchar(30),
Points int
)
Insert into FootBallLeague values ('1001','Italy','France','Win','France','4')
Insert into FootBallLeague values ('1002','Brazil','Portugal','Draw','null','2')
Insert into FootBallLeague values ('1003','England','Japan','Win','England','4')
Insert into FootBallLeague values ('1004','USA','Russia','Win','Russia','4')
Insert into FootBallLeague values ('1005','Portugal','Italy','Draw','null','2')
Insert into FootBallLeague values ('1006','Brazil','France','Win','Brazil','4')
Insert into FootBallLeaguevalues ('1007','England','Russia','Win','Russia','4')
Insert into FootBallLeague values ('1008','Japan','USA','Draw','null','2')
select * from FootBallLeague3;

Create procedure InsertFootBallLeague4
@MatchID int,
@TeamName1 nvarchar(30),
@TeamName2 nvarchar(30),
@Status varchar(10),
@WinningTeam nvarchar(30),
@Points int
as
Begin
Insert into FootBallLeague4 (MatchID,TeamName1,TeamName2,Status,WinningTeam,Points)
values (@MatchID, @TeamName1, @TeamName2, @Status, @WinningTeam, @Points)
End;

using Football.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace Football.Controllers
{
    public class HomeController : Controller
    {
        SampleEntities db = new SampleEntities();
        // GET: Home
        public ActionResult Index()
        {
            var data = db.FootBallLeagues.ToList();
            return View(data);
        }

        [HttpPost]
        public ActionResult Create( FootBallLeague f)
        {
            if(ModelState.IsValid==true)
            {
                db.FootBallLeagues.Add(f);
                int a=db.SaveChanges();
                if(a>0)
                {
                    TempData["InsertMessage"]="<script>alert('Inserted!!')</script>";
                    return RedirectToAction("Index");
                }
                else 
                {
                    TempData["InsertMessage"]="<script>alert('notInserted!!')</script>";
                    
                }
            }
            return View();
        }
    }
}

--------------------
Create.cshtml
--------------------
@model Football.Models.FootBallLeague

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <h1 style="background-color:MediumSeaGreen;">

        <div class="form-horizontal">
            <h4>FootBallLeague</h4>
            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">

                @Html.LabelFor(model => model.MatchId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MatchId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MatchId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TeamName1, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TeamName1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TeamName1, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TeamName2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TeamName2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TeamName2, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MatchStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MatchStatus, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MatchStatus, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.WinningTeam, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.WinningTeam, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.WinningTeam, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Points, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Points, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Points, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    </h1>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
